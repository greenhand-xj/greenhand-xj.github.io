<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>contextmenu右击弹出快捷菜单</title>
      <link href="/archives/c8e0c903.html"/>
      <url>/archives/c8e0c903.html</url>
      
        <content type="html"><![CDATA[<h3 id="contextmenu-事件"><a href="#contextmenu-事件" class="headerlink" title="contextmenu 事件"></a>contextmenu 事件</h3><p>就是右击事件</p><ol><li>原生</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;noContextMenu&quot;</span>&gt;</span>这个段落右键菜单已被禁用。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>但是这个段落没有被禁用。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">noContext = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;noContextMenu&#x27;</span>);</span><br><span class="line"></span><br><span class="line">noContext.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>vue 中</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(tag, index) in $store.getters.tagsViewList&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;tag.fullPath&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">contextmenu.prevent</span>=<span class="string">&quot;openMenu($event, index)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &#123;&#123; tag.title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fuse.js实现全局搜索</title>
      <link href="/archives/eead959.html"/>
      <url>/archives/eead959.html</url>
      
        <content type="html"><![CDATA[<h2 id="对检索数据源进行模糊搜索"><a href="#对检索数据源进行模糊搜索" class="headerlink" title="对检索数据源进行模糊搜索"></a>对检索数据源进行模糊搜索</h2><p>如果我们想要进行 <a href="https://fusejs.io/">模糊搜索</a> 的话，那么需要依赖一个第三方的库 <a href="https://fusejs.io/">fuse.js</a></p><ol><li><p>安装 <a href="https://fusejs.io/">fuse.js</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save fuse.js@6.4.6</span><br></pre></td></tr></table></figure></li><li><p>初始化 <code>Fuse</code>，更多初始化配置项 <a href="https://fusejs.io/api/options.html">可点击这里</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Fuse</span> <span class="keyword">from</span> <span class="string">&#x27;fuse.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索库相关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fuse = <span class="keyword">new</span> <span class="title class_">Fuse</span>(list <span class="comment">/**数据源**/</span>, &#123;</span><br><span class="line">  <span class="comment">// 是否按优先级进行排序</span></span><br><span class="line">  <span class="attr">shouldSort</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 匹配长度超过这个值的才会被认为是匹配的</span></span><br><span class="line">  <span class="attr">minMatchCharLength</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 将被搜索的键列表。 这支持嵌套路径、加权搜索、在字符串和对象数组中搜索。</span></span><br><span class="line">  <span class="comment">// name：搜索的键</span></span><br><span class="line">  <span class="comment">// weight：对应的权重</span></span><br><span class="line">  <span class="attr">keys</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">      <span class="attr">weight</span>: <span class="number">0.7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;path&#x27;</span>,</span><br><span class="line">      <span class="attr">weight</span>: <span class="number">0.3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>参考 <a href="https://fusejs.io/demo.html">Fuse Demo</a> 与 最终效果，可以得出，我们最终期望得到如下的检索数据源结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/my&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;个人中心&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;用户&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/manage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;用户&quot;</span><span class="punctuation">,</span> <span class="string">&quot;用户管理&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/info&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;用户&quot;</span><span class="punctuation">,</span> <span class="string">&quot;用户信息&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/article&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;文章&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/article/ranking&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;文章&quot;</span><span class="punctuation">,</span> <span class="string">&quot;文章排名&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/article/create&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;文章&quot;</span><span class="punctuation">,</span> <span class="string">&quot;创建文章&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索方法</span></span><br><span class="line"><span class="keyword">const</span> searchOption = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">querySearch</span> = (<span class="params">query</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (query !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    searchOption.<span class="property">value</span> = fuse.<span class="title function_">search</span>(query)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    searchOption.<span class="property">value</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器全屏</title>
      <link href="/archives/1d0ba531.html"/>
      <url>/archives/1d0ba531.html</url>
      
        <content type="html"><![CDATA[<h2 id="screenfull-原理及方案分析"><a href="#screenfull-原理及方案分析" class="headerlink" title="screenfull 原理及方案分析"></a>screenfull 原理及方案分析</h2><p><strong>原理：</strong></p><p>对于 <code>screenfull </code> 而言，浏览器本身已经提供了对用的 <code>API</code>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API">点击这里即可查看</a>，这个 <code>API</code> 中，主要提供了两个方法：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/exitFullscreen"><code>Document.exitFullscreen()</code></a>：该方法用于请求从全屏模式切换到窗口模式</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/requestFullScreen"><code>Element.requestFullscreen()</code></a>：该方法用于请求浏览器（user agent）将特定元素（甚至延伸到它的后代元素）置为全屏模式<ol><li>比如我们可以通过 <code>document.getElementById(&#39;app&#39;).requestFullscreen()</code> 在获取 <code>id=app</code> 的 <code>DOM</code> 之后，把该区域置为全屏</li></ol></li></ol><p>但是该方法存在一定的小问题，比如：</p><ol><li><code>appmain</code> 区域背景颜色为黑色</li></ol><p>所以通常情况下我们不会直接使用该 <code>API</code> 来去实现全屏效果，而是会使用它的包装库 <a href="https://www.npmjs.com/package/screenfull">screenfull</a></p><p><strong>方案：</strong></p><p>整体的方案实现：</p><ol><li>封装 <code>screenfull</code> 组件<ol><li>展示切换按钮</li><li>基于 <a href="https://www.npmjs.com/package/screenfull">screenfull</a> 实现切换功能</li></ol></li></ol><h2 id="方案落地：screenfull"><a href="#方案落地：screenfull" class="headerlink" title="方案落地：screenfull"></a>方案落地：screenfull</h2><p><strong>封装 <code>screenfull</code> 组件：</strong></p><ol><li><p>下来依赖包 <a href="https://www.npmjs.com/package/screenfull">screenfull</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i screenfull@5.1.0</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>components/Screenfull/index</code><br>要注意：浏览器全屏后，是有三种方式可以退出的：1.点击我们的图标 2. 按 ESC 键 3.全屏后鼠标向上去，会出现退出按钮<br>后面两种我们是监听不到的，只能借助 screenfull 这个库的 change 事件，来监听意外的全屏的退出情况，并及时改变状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;onToggle&quot;&gt;</span><br><span class="line">    &lt;svg-icon :icon=&quot;isFullscreen ? &#x27;exit-fullscreen&#x27; : &#x27;fullscreen&#x27;&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import screenfull from &#x27;screenfull&#x27;</span><br><span class="line"></span><br><span class="line">// 是否全屏</span><br><span class="line">const isFullscreen = ref(false)</span><br><span class="line"></span><br><span class="line">// 监听变化</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  isFullscreen.value = screenfull.isFullscreen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 切换事件</span><br><span class="line">const onToggle = () =&gt; &#123;</span><br><span class="line">  screenfull.toggle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置侦听器</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  screenfull.on(&#x27;change&#x27;, change)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 删除侦听器</span><br><span class="line">onUnmounted(() =&gt; &#123;</span><br><span class="line">  screenfull.off(&#x27;change&#x27;, change)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-i18n的简单使用</title>
      <link href="/archives/6989503e.html"/>
      <url>/archives/6989503e.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-i18n@next</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">&#x27;./lang/zh&#x27;</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;./lang/en&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">      ...enLocale,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">      ...zhLocale,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取出本地的语言存储选项 zh en</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getLanguage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> store &amp;&amp; store.<span class="property">getters</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">language</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">legacy</span>: <span class="literal">false</span>, <span class="comment">// 使用composition API</span></span><br><span class="line">  <span class="attr">globalInjection</span>: <span class="literal">true</span>, <span class="comment">// 全局使用t函数</span></span><br><span class="line">  <span class="attr">locale</span>: <span class="title function_">getLanguage</span>(),</span><br><span class="line">  messages,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure><h3 id="在-main-js-中引入"><a href="#在-main-js-中引入" class="headerlink" title="在 main.js 中引入"></a>在 main.js 中引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用国际化</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(i18n).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="在-template-中使用"><a href="#在-template-中使用" class="headerlink" title="在 template 中使用"></a>在 template 中使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dropdown-item</span>&gt;</span>&#123;&#123; $t(&#x27;msg.navBar.home&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在组件的-script-中使用"><a href="#在组件的-script-中使用" class="headerlink" title="在组件的 script 中使用"></a>在组件的 script 中使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切换语言的方法</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">useI18n</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleSetLanguage</span> = (<span class="params">lang</span>) =&gt; &#123;</span><br><span class="line">  i18n.<span class="property">locale</span>.<span class="property">value</span> = lang</span><br><span class="line">  store.<span class="title function_">commit</span>(<span class="string">&#x27;app/setLanguage&#x27;</span>, lang)</span><br><span class="line">  <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(i18n.<span class="title function_">t</span>(<span class="string">&#x27;msg.toast.switchLangSuccess&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-js-文件的中使用"><a href="#在-js-文件的中使用" class="headerlink" title="在 js 文件的中使用"></a>在 js 文件的中使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;@/i18n&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">generateTitle</span>(<span class="params">title</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> i18n.<span class="property">global</span>.<span class="title function_">t</span>(<span class="string">&#x27;msg.route.&#x27;</span> + title)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="element-plus-实现动态语言切换"><a href="#element-plus-实现动态语言切换" class="headerlink" title="element-plus 实现动态语言切换"></a>element-plus 实现动态语言切换</h3><p>注意的是 暂时没有与 vue-i18n 兼容<br>但有自己的一套解决方案<br>el-config-provider 要套在最外层的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-config-provider :locale=&quot;locale&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/el-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import zhCn from &#x27;element-plus/es/locale/lang/zh-cn&#x27;</span><br><span class="line">import en from &#x27;element-plus/lib/locale/lang/en&#x27;</span><br><span class="line"></span><br><span class="line">// 为了配和vue-18n实时切换语言</span><br><span class="line">const store = useStore()</span><br><span class="line">const locale = computed(() =&gt; (store.getters.language === &#x27;en&#x27; ? en : zhCn))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue使用函数式导入ElementPlus</title>
      <link href="/archives/8aeb87a0.html"/>
      <url>/archives/8aeb87a0.html</url>
      
        <content type="html"><![CDATA[<h3 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h3><p>文件位置 =&gt; src/plugins/element.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在-main-js-中引入"><a href="#在-main-js-中引入" class="headerlink" title="在 main.js 中引入"></a>在 main.js 中引入</h3><p>可以简化 main 的代码，更加语义化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> installElementPlus <span class="keyword">from</span> <span class="string">&#x27;@/plugins/element&#x27;</span></span><br><span class="line"><span class="comment">//函数式</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="title function_">installElementPlus</span>(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">//插件式</span></span><br><span class="line">app.<span class="title function_">use</span>(installElementPlus)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3中面包屑解决方案</title>
      <link href="/archives/ce5c4e1e.html"/>
      <url>/archives/ce5c4e1e.html</url>
      
        <content type="html"><![CDATA[<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-breadcrumb separator=&quot;/&quot; class=&quot;breadcrumb&quot;&gt;</span><br><span class="line">    &lt;transition-group name=&quot;breadcrumb&quot;&gt;</span><br><span class="line">      &lt;el-breadcrumb-item</span><br><span class="line">        v-for=&quot;(item, index) in breadcrumbData&quot;</span><br><span class="line">        :key=&quot;item.path&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 不可点击项 --&gt;</span><br><span class="line">        &lt;span class=&quot;no-redirect&quot; v-if=&quot;index === breadcrumbData.length - 1&quot;&gt;&#123;&#123;</span><br><span class="line">          item.meta.title</span><br><span class="line">        &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;!-- 可点击项 --&gt;</span><br><span class="line">        &lt;span class=&quot;redirect&quot; v-else @click=&quot;onLinkClick(item)&quot;&gt;&#123;&#123;</span><br><span class="line">          item.meta.title</span><br><span class="line">        &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/el-breadcrumb-item&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/el-breadcrumb&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">// 生成数组对象数据</span><br><span class="line">const breadcrumbData = ref([])</span><br><span class="line"></span><br><span class="line">const getBreadcrumbData = () =&gt; &#123;</span><br><span class="line">  // route.matched 返回得是当前路由的路由表</span><br><span class="line">  breadcrumbData.value = route.matched.filter(</span><br><span class="line">    (item) =&gt; item.meta &amp;&amp; item.meta.title</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">// 监听路由变化</span><br><span class="line">const route = useRoute()</span><br><span class="line">watch(</span><br><span class="line">  route,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    getBreadcrumbData()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; immediate: true &#125;</span><br><span class="line">)</span><br><span class="line">// 跳转点击事件</span><br><span class="line">const router = useRouter()</span><br><span class="line">const onLinkClick = (item) =&gt; &#123;</span><br><span class="line">  router.push(item.path)</span><br><span class="line">&#125;</span><br><span class="line">// 将来需要主题替换，所以hover的颜色我们设置为主色</span><br><span class="line">const store = useStore()</span><br><span class="line">const linkHoverColor = ref(store.getters.cssVar.menuBg)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.breadcrumb &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  line-height: 45px;</span><br><span class="line">  margin-left: 8px;</span><br><span class="line">  .no-redirect &#123;</span><br><span class="line">    color: #97a8be;</span><br><span class="line">    cursor: text;</span><br><span class="line">  &#125;</span><br><span class="line">  .redirect &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #666;</span><br><span class="line">    font-size: 600;</span><br><span class="line">  &#125;</span><br><span class="line">  .redirect:hover &#123;</span><br><span class="line">    color: v-bind(linkHoverColor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>整体思路：利用 route.matched 这个 api 的返回值来构建面包屑的所需数据,并实时监视 route，实时更新面包屑的所需数据<br>transition-group 是 vue3 动画语法<br>下面是动画代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.breadcrumb-enter-active</span>,</span><br><span class="line"><span class="selector-class">.breadcrumb-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.breadcrumb-enter-from</span>,</span><br><span class="line"><span class="selector-class">.breadcrumb-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.breadcrumb-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3.2中组件状态驱动css</title>
      <link href="/archives/2e8936f8.html"/>
      <url>/archives/2e8936f8.html</url>
      
        <content type="html"><![CDATA[<h3 id="在-css-中使用-v-bind-绑定状态"><a href="#在-css-中使用-v-bind-绑定状态" class="headerlink" title="在 css 中使用 v-bind 绑定状态"></a>在 css 中使用 v-bind 绑定状态</h3><p>组件状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将来需要主题替换，所以hover的颜色我们设置为主色</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line"><span class="keyword">const</span> linkHoverColor = <span class="title function_">ref</span>(store.<span class="property">getters</span>.<span class="property">cssVar</span>.<span class="property">menuBg</span>)</span><br></pre></td></tr></table></figure><p>样式中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.redirect</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(linkHoverColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3中动态渲染menu</title>
      <link href="/archives/5e7974ee.html"/>
      <url>/archives/5e7974ee.html</url>
      
        <content type="html"><![CDATA[<h3 id="编写生成菜单数据格式的方法"><a href="#编写生成菜单数据格式的方法" class="headerlink" title="编写生成菜单数据格式的方法"></a>编写生成菜单数据格式的方法</h3><h5 id="菜单数据格式"><a href="#菜单数据格式" class="headerlink" title="菜单数据格式"></a>菜单数据格式</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;个人中心&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;员工管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;角色列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;权限列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文章排名&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h5 id="处理路由表的重复性和生成菜单数据结构"><a href="#处理路由表的重复性和生成菜单数据结构" class="headerlink" title="处理路由表的重复性和生成菜单数据结构"></a>处理路由表的重复性和生成菜单数据结构</h5><p>只要是有 meta 标签的且里面有 title 和 menu 两个属性就是 menu 菜单项，没有的话就是普通路由，像 login 路由<br>有 children 属性且长度大于 0 就是 父级菜单项<br>没有 children 或 长度为 0 就是一级菜单项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有的子集路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; routes 所有的路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getChildrenRoutes</span> = (<span class="params">routes</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">children</span> &amp;&amp; route.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(...route.<span class="property">children</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理脱离层级的路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">filterRoutes</span> = (<span class="params">routes</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 所有的子集路由</span></span><br><span class="line">  <span class="keyword">const</span> childrenRoutes = <span class="title function_">getChildrenRoutes</span>(routes)</span><br><span class="line">  <span class="comment">// 根据子集路由进行查重操作</span></span><br><span class="line">  <span class="keyword">return</span> routes.<span class="title function_">filter</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 根据route在children中进行查重，把所有的重复路由记录删除,find找到就一个对象，没找到就是null</span></span><br><span class="line">    <span class="keyword">return</span> !childrenRoutes.<span class="title function_">find</span>(<span class="function">(<span class="params">childrenRoute</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> childrenRoute.<span class="property">path</span> === route.<span class="property">path</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNull</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 判断没有</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) === <span class="string">&#x27;&#123;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 判断route.meta</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) === <span class="string">&#x27;[]&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 判断route.children</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据routes 数据 ，返回对应的menu规则数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; routes 已经处理好的路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">generateMenus</span>(<span class="params">routes, basePath = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="comment">// 遍历路由表</span></span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不存在 children &amp;&amp; 不存在 meta 直接 return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isNull</span>(item.<span class="property">meta</span>) &amp;&amp; <span class="title function_">isNull</span>(item.<span class="property">children</span>)) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 存在 children 不存在 meta，进入迭代</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isNull</span>(item.<span class="property">meta</span>) &amp;&amp; !<span class="title function_">isNull</span>(item.<span class="property">children</span>)) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(...<span class="title function_">generateMenus</span>(item.<span class="property">children</span>))</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 合并 path 作为跳转路径</span></span><br><span class="line">    <span class="keyword">const</span> routePath = path.<span class="title function_">resolve</span>(basePath, item.<span class="property">path</span>)</span><br><span class="line">    <span class="comment">// 路由分离之后，存在同名父路由的情况，需要单独处理</span></span><br><span class="line">    <span class="keyword">let</span> route = result.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">path</span> === routePath)</span><br><span class="line">    <span class="keyword">if</span> (!route) &#123;</span><br><span class="line">      route = &#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">path</span>: routePath,</span><br><span class="line">        <span class="attr">children</span>: [],</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// icon 与 title 必须全部存在</span></span><br><span class="line">      <span class="keyword">if</span> (route.<span class="property">meta</span>.<span class="property">icon</span> &amp;&amp; route.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">        <span class="comment">// meta 存在生成 route 对象，放入 arr</span></span><br><span class="line">        result.<span class="title function_">push</span>(route)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存在 children 进入迭代到children</span></span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">      route.<span class="property">children</span>.<span class="title function_">push</span>(...<span class="title function_">generateMenus</span>(item.<span class="property">children</span>, route.<span class="property">path</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意-import-path-from-‘path’-这里可能会报错"><a href="#注意-import-path-from-‘path’-这里可能会报错" class="headerlink" title="注意 import path from ‘path’ 这里可能会报错"></a>注意 import path from ‘path’ 这里可能会报错</h5><p>解决办法如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add path-browserify</span><br></pre></td></tr></table></figure><p>在 vue.config.js 中新增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">fallback</span>: &#123; <span class="attr">path</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;path-browserify&#x27;</span>) &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="在-Sidebar-中使用"><a href="#在-Sidebar-中使用" class="headerlink" title="在 Sidebar 中使用"></a>在 Sidebar 中使用</h3><p>router.getRoutes()这个 api 会返回所有的路由（包括子路由当做一级路由），所以要进行路由去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态计算菜单</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> dynamicRoutes = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> completeRoutes = <span class="title function_">filterRoutes</span>(router.<span class="title function_">getRoutes</span>()) <span class="comment">//路由去重</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">generateMenus</span>(completeRoutes) <span class="comment">//生成menu数据结构</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结构如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">   <span class="attr">redirect</span>: <span class="string">&#x27;/user/manage&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">   <span class="attr">meta</span>: &#123;</span><br><span class="line">     <span class="attr">title</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">     <span class="attr">icon</span>: <span class="string">&#x27;personnel&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">children</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/user/manage&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;userManage&#x27;</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/user-manage/index.vue&#x27;</span>),</span><br><span class="line">       <span class="attr">meta</span>: &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;userManage&#x27;</span>,</span><br><span class="line">         <span class="attr">icon</span>: <span class="string">&#x27;personnel-manage&#x27;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/user/role&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;userRole&#x27;</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/role-list/index.vue&#x27;</span>),</span><br><span class="line">       <span class="attr">meta</span>: &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;roleList&#x27;</span>,</span><br><span class="line">         <span class="attr">icon</span>: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/user/permission&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;userPermission&#x27;</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@/views/permission-list/index.vue&#x27;</span>),</span><br><span class="line">       <span class="attr">meta</span>: &#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;permissionList&#x27;</span>,</span><br><span class="line">         <span class="attr">icon</span>: <span class="string">&#x27;permission&#x27;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态渲染"><a href="#动态渲染" class="headerlink" title="动态渲染"></a>动态渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:unique-opened</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:background-color</span>=<span class="string">&quot;menuBg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:text-color</span>=<span class="string">&quot;menuText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:active-text-color</span>=<span class="string">&quot;menuActiveText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">router</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:default-active</span>=<span class="string">&quot;activeMenu&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sidebar-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;item in dynamicRoutes&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;item.path&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:route</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">sidebar-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="sidebar-item-组件"><a href="#sidebar-item-组件" class="headerlink" title="sidebar-item 组件"></a>sidebar-item 组件</h5><p>这里注意的是组件也可以自己调用自己，进行循环渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-sub-menu v-if=&quot;route.children.length &gt; 0&quot; :index=&quot;route.path&quot;&gt;</span><br><span class="line">    &lt;template #title&gt;</span><br><span class="line">      &lt;menu-item :title=&quot;route.meta.title&quot; :icon=&quot;route.meta.icon&quot;&gt;&lt;/menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- 循环渲染children --&gt;</span><br><span class="line">    &lt;sidebar-item</span><br><span class="line">      v-for=&quot;item in route.children&quot;</span><br><span class="line">      :key=&quot;item.path&quot;</span><br><span class="line">      :route=&quot;item&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-sub-menu&gt;</span><br><span class="line">  &lt;el-menu-item v-else :index=&quot;route.path&quot;&gt;</span><br><span class="line">    &lt;menu-item :title=&quot;route.meta.title&quot; :icon=&quot;route.meta.icon&quot;&gt;&lt;/menu-item&gt;</span><br><span class="line">  &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;</span><br><span class="line">import MenuItem from &#x27;./MenuItem&#x27;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  route: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="menu-item-组件"><a href="#menu-item-组件" class="headerlink" title="menu-item 组件"></a>menu-item 组件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- element icon --&gt;</span><br><span class="line">  &lt;i v-if=&quot;icon.includes(&#x27;el-icon&#x27;)&quot; class=&quot;sub-el-icon&quot; :class=&quot;icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;!-- svg --&gt;</span><br><span class="line">  &lt;svg-icon v-else :icon=&quot;icon&quot;&gt;&lt;/svg-icon&gt;</span><br><span class="line">  &lt;!-- 文本 --&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  icon: &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>scss样式变量与js共享</title>
      <link href="/archives/77bf3dd.html"/>
      <url>/archives/77bf3dd.html</url>
      
        <content type="html"><![CDATA[<h3 id="scss-定义样式变量并导出"><a href="#scss-定义样式变量并导出" class="headerlink" title="scss 定义样式变量并导出"></a>scss 定义样式变量并导出</h3><p>注意：scss 样式文件要以 xxx.module.scss 结尾<br>JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sidebar</span></span><br><span class="line"><span class="variable">$menuText</span>: <span class="number">#bfcbd9</span>;</span><br><span class="line"><span class="variable">$menuActiveText</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="variable">$subMenuActiveText</span>: <span class="number">#f4f4f5</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$menuBg</span>: <span class="number">#304156</span>;</span><br><span class="line"><span class="variable">$menuHover</span>: <span class="number">#263445</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$subMenuBg</span>: <span class="number">#1f2d3d</span>;</span><br><span class="line"><span class="variable">$subMenuHover</span>: <span class="number">#001528</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sideBarWidth</span>: <span class="number">210px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass</span></span><br><span class="line"><span class="comment">// JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入</span></span><br><span class="line">:export &#123;</span><br><span class="line">  menuText: <span class="variable">$menuText</span>;</span><br><span class="line">  menuActiveText: <span class="variable">$menuActiveText</span>;</span><br><span class="line">  subMenuActiveText: <span class="variable">$subMenuActiveText</span>;</span><br><span class="line">  menuBg: <span class="variable">$menuBg</span>;</span><br><span class="line">  menuHover: <span class="variable">$menuHover</span>;</span><br><span class="line">  subMenuBg: <span class="variable">$subMenuBg</span>;</span><br><span class="line">  subMenuHover: <span class="variable">$subMenuHover</span>;</span><br><span class="line">  sideBarWidth: <span class="variable">$sideBarWidth</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js-里使用"><a href="#js-里使用" class="headerlink" title="js 里使用"></a>js 里使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> variables <span class="keyword">from</span> <span class="string">&#x27;@/styles/variables.module.scss&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sidebar</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;sidebar-container&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: variables.menuBg &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">sidebar</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack中svg图标组件封装</title>
      <link href="/archives/af0c5c93.html"/>
      <url>/archives/af0c5c93.html</url>
      
        <content type="html"><![CDATA[<h3 id="svg-全局组件封装"><a href="#svg-全局组件封装" class="headerlink" title="svg 全局组件封装"></a>svg 全局组件封装</h3><p>这里使用 mask css 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 展示外部图标 --&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    v-if=&quot;isExternal&quot;</span><br><span class="line">    :style=&quot;styleExternalIcon&quot;</span><br><span class="line">    class=&quot;svg-external-icon svg-icon&quot;</span><br><span class="line">    :class=&quot;className&quot;</span><br><span class="line">  &gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 展示内部图标 --&gt;</span><br><span class="line">  &lt;svg v-else class=&quot;svg-icon&quot; :class=&quot;className&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;iconName&quot;&gt;&lt;/use&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isExternal as external &#125; from &#x27;@/utils/validate&#x27;</span><br><span class="line">import &#123; defineProps, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // icon图标</span><br><span class="line">  icon: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  // 图标类名</span><br><span class="line">  className: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">// 判断当前图标是否为外部图标</span><br><span class="line">const isExternal = computed(() =&gt; external(props.icon))</span><br><span class="line"></span><br><span class="line">// 外部图标样式</span><br><span class="line">const styleExternalIcon = computed(() =&gt; (&#123;</span><br><span class="line">  mask: `url($&#123;props.icon&#125;) no-repeat 50% 50%`,</span><br><span class="line">  &#x27;-webkit-mask&#x27;: `url($&#123;props.icon&#125;) no-repeat 50% 50%`,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">// 内部图标</span><br><span class="line">const iconName = computed(() =&gt; `#icon-$&#123;props.icon&#125;`)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.svg-external-icon &#123;</span><br><span class="line">  background-color: currentColor;</span><br><span class="line">  mask-size: cover !important;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>isExternal 工具类的代码如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为外部资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">path</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isExternal</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(https?:|mailto:|tel:)/</span>.<span class="title function_">test</span>(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="svg-图标的所有全局导入"><a href="#svg-图标的所有全局导入" class="headerlink" title="svg 图标的所有全局导入"></a>svg 图标的所有全局导入</h3><p>这里使用了 webpack 的 require.context 的 API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入所有的svg图标</span></span><br><span class="line"><span class="comment">// 2.完成svgicon的全局注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/SvgIcon/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://webpack.docschina.org/guides/dependency-management/#requirecontext</span></span><br><span class="line"><span class="keyword">const</span> svgRequire = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./svg&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.svg$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时返回了Require函数，可以接收request参数，用户require导入</span></span><br><span class="line"><span class="comment">// 改函数提供了三个函数 可以通过svgRequire.keys 获得所有的svg图标</span></span><br><span class="line"><span class="comment">// 遍历图标，把图标作为 request参数传到svgRequire导入函数中，完成本地svg图标的导入</span></span><br><span class="line"></span><br><span class="line">svgRequire.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">svgIcon</span>) =&gt;</span> <span class="title function_">svgRequire</span>(svgIcon))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">  app.<span class="title function_">component</span>(<span class="string">&#x27;svg-icon&#x27;</span>, <span class="title class_">SvgIcon</span>) <span class="comment">//全局注册组件 vue3中没有vue2中的 Vue.component()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-js-全局注册"><a href="#main-js-全局注册" class="headerlink" title="main.js 全局注册"></a>main.js 全局注册</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入svgicon</span></span><br><span class="line"><span class="keyword">import</span> installIcons <span class="keyword">from</span> <span class="string">&#x27;@/icons/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="title function_">installIcons</span>(app)</span><br></pre></td></tr></table></figure><h3 id="配置解析-Svg-的-loader"><a href="#配置解析-Svg-的-loader" class="headerlink" title="配置解析 Svg 的 loader"></a>配置解析 Svg 的 loader</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add  svg-sprite-loader@6.0.9 --save-dev</span><br></pre></td></tr></table></figure><ol><li>然后再 vue.config.js 中配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">chainWebpack</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置 svg-sprite-loader</span></span><br><span class="line">    config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>).<span class="property">exclude</span>.<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/icons&#x27;</span>)).<span class="title function_">end</span>()</span><br><span class="line">    config.<span class="property">module</span></span><br><span class="line">      .<span class="title function_">rule</span>(<span class="string">&#x27;icons&#x27;</span>)</span><br><span class="line">      .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">      .<span class="property">include</span>.<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/icons&#x27;</span>))</span><br><span class="line">      .<span class="title function_">end</span>()</span><br><span class="line">      .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">options</span>(&#123;</span><br><span class="line">        <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">end</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React与immerjs-用可变的方式实现不可变的范式</title>
      <link href="/archives/c122a5fa.html"/>
      <url>/archives/c122a5fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="React-不可变范式改变数据"><a href="#React-不可变范式改变数据" class="headerlink" title="React 不可变范式改变数据"></a>React 不可变范式改变数据</h3><p>在 React 里，如果要更新状态的话，需要使用新状态去替换旧状态，不能在旧状态下直接修改数据。跟 vue 刚好相反<br>下面是代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">delItem</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setList</span>(list.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> !== id)) <span class="comment">//filter返回新数组 =&gt; 新状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addItem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setList</span>([...list, &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;angular&#x27;</span> &#125;]) <span class="comment">// ...list + 新增数据 =&gt; 新状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;item.name&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> delItem(item.id)&#125;&gt;❌<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addItem&#125;</span>&gt;</span>add item<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-immerjs-方便修改数据-hooks"><a href="#使用-immerjs-方便修改数据-hooks" class="headerlink" title="使用 immerjs 方便修改数据(hooks)"></a>使用 immerjs 方便修改数据(hooks)</h3><p>先按照 immer</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add immer</span><br></pre></td></tr></table></figure><p>使用 produce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">&#x27;immer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delItem</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setList</span>(</span><br><span class="line">    <span class="comment">//draft就是源数据</span></span><br><span class="line">    <span class="title function_">produce</span>(<span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> idx = draft.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === id)</span><br><span class="line">      draft.<span class="title function_">splice</span>(idx, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addItem</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//draft就是源数据</span></span><br><span class="line">  <span class="title function_">setList</span>(</span><br><span class="line">    <span class="title function_">produce</span>(<span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">      draft.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;angular&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rgb转16进制 and 16进制转rgb</title>
      <link href="/archives/854a37ee.html"/>
      <url>/archives/854a37ee.html</url>
      
        <content type="html"><![CDATA[<h3 id="rgb-传-16-进制"><a href="#rgb-传-16-进制" class="headerlink" title="rgb 传 16 进制"></a>rgb 传 16 进制</h3><p>利用正则和 toString 的第一个参数可以传要指定进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.正则匹配方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">rgb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> reg1 = <span class="regexp">/^(rgb|RGB)\(\s*(\d&#123;1,3&#125;)\s*,\s*(\d&#123;1,3&#125;)\s*,\s*(\d&#123;1,3&#125;)\s*\)$/</span></span><br><span class="line">  <span class="keyword">const</span> match = rgb.<span class="title function_">match</span>(reg1)</span><br><span class="line">  <span class="keyword">return</span> [match[<span class="number">2</span>] * <span class="number">1</span>, match[<span class="number">3</span>] * <span class="number">1</span>, match[<span class="number">4</span>] * <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(<span class="string">&#x27;rgb(1,2,4)&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.正则匹配方式二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue2</span>(<span class="params">rgb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> reg2 = <span class="regexp">/\d+/g</span></span><br><span class="line">  <span class="keyword">const</span> match = rgb.<span class="title function_">match</span>(reg2)</span><br><span class="line">  <span class="keyword">return</span> match.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue2</span>(<span class="string">&#x27;rgb(1,2,4&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为16进制至少要有两位 =&gt; 0f</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="title class_">Number</span>(<span class="number">20</span>) &gt; <span class="number">16</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;0&#x27;</span>) + <span class="title class_">Number</span>(<span class="number">20</span>).<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;0&#x27;</span> + <span class="title class_">Number</span>(<span class="number">14</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">100</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rgb2Hex</span>(<span class="params">rgb</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="title function_">getValue2</span>(rgb)</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="title class_">Number</span>(cur).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> pre + val</span><br><span class="line">  &#125;, <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-进制转-rgb"><a href="#16-进制转-rgb" class="headerlink" title="16 进制转 rgb"></a>16 进制转 rgb</h3><p>parseInt 的二个参数可以传指定进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;ff&#x27;</span>, <span class="number">16</span>) <span class="comment">// 255</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Docker</title>
      <link href="/archives/96e9ca9a.html"/>
      <url>/archives/96e9ca9a.html</url>
      
        <content type="html"><![CDATA[<ol><li>安装官方给的 shell 脚本</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>执行 shell 文件<br>这里要等上几分钟</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh get-docker.sh</span><br></pre></td></tr></table></figure><ol start="3"><li>查看版本</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuex中mapSate的多种用法</title>
      <link href="/archives/78b1414a.html"/>
      <url>/archives/78b1414a.html</url>
      
        <content type="html"><![CDATA[<h3 id="mapState-的两种写法"><a href="#mapState-的两种写法" class="headerlink" title="mapState 的两种写法"></a>mapState 的两种写法</h3><ol><li>数组用法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(<span class="string">&#x27;如果开启了命名空间&#x27;</span>,[<span class="string">&#x27;example&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对象用法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(<span class="string">&#x27;如果开启了命名空间&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">increase</span>:<span class="string">&#x27;add&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实对象的 value 可以是一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(<span class="string">&#x27;如果开启了命名空间&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">increase</span>:<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">add</span> || <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用函数的写法的话一般用来进一步处理 state 里的数据，类似于 [getters]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubantu安装node并快速部署静态资源</title>
      <link href="/archives/9820893f.html"/>
      <url>/archives/9820893f.html</url>
      
        <content type="html"><![CDATA[<h3 id="使用-apt-安装-node"><a href="#使用-apt-安装-node" class="headerlink" title="使用 apt 安装 node"></a>使用 apt 安装 node</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install nodejs -y</span><br></pre></td></tr></table></figure><p>但这种方式安装的 node 版本很低</p><h3 id="更换-nodejs-的源"><a href="#更换-nodejs-的源" class="headerlink" title="更换 nodejs 的源"></a>更换 nodejs 的源</h3><p>具体的地址 <a href="https://github.com/nodesource/distributions">https://github.com/nodesource/distributions</a><br>更换源命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -</span><br></pre></td></tr></table></figure><p>接下来在执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install nodejs -y</span><br></pre></td></tr></table></figure><h3 id="npm-全局安装-serve-包"><a href="#npm-全局安装-serve-包" class="headerlink" title="npm 全局安装 serve 包"></a>npm 全局安装 serve 包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g serve</span><br></pre></td></tr></table></figure><p>在任意一个目录下 运行 serve 命令，那么那个目录就是服务器的根目录</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>引入ant-design-vueCDN方式的问题</title>
      <link href="/archives/adfd0c7d.html"/>
      <url>/archives/adfd0c7d.html</url>
      
        <content type="html"><![CDATA[<h3 id="引入-cdn-方式会导致单标签失效"><a href="#引入-cdn-方式会导致单标签失效" class="headerlink" title="引入 cdn 方式会导致单标签失效"></a>引入 cdn 方式会导致单标签失效</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>wode<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这样的方式会导致下面这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>wode<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原因应该是组件的标签在非脚手架的项目中不生效</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单封装uni.request方法</title>
      <link href="/archives/9f480b3.html"/>
      <url>/archives/9f480b3.html</url>
      
        <content type="html"><![CDATA[<h3 id="使用-Promise-简单封装"><a href="#使用-Promise-简单封装" class="headerlink" title="使用 Promise 简单封装"></a>使用 Promise 简单封装</h3><p>因为 axios 对 uniapp 不怎么兼容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> baseURL = <span class="string">&#x27;https://nfbo5cuh.lc-cn-n1-shared.com&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> $http = <span class="keyword">function</span> (<span class="params">url, method = <span class="string">&#x27;GET&#x27;</span>, data = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: baseURL + url,</span><br><span class="line">      method,</span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        ....</span><br><span class="line">      &#125;,</span><br><span class="line">      data,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> $get = <span class="keyword">function</span> (<span class="params">url, data = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $http(url, <span class="string">&#x27;GET&#x27;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> $post = <span class="keyword">function</span> (<span class="params">url, data = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $http(url, <span class="string">&#x27;POST&#x27;</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vite全量打包和按需打包</title>
      <link href="/archives/1b225bbf.html"/>
      <url>/archives/1b225bbf.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig, build &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vite&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> vue = <span class="built_in">require</span>(<span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> vueJsx = <span class="built_in">require</span>(<span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AutoImport</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-auto-import/vite&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fsExtra = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打包入口文件</span></span><br><span class="line"><span class="keyword">const</span> entryDir = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../packages&#x27;</span>)</span><br><span class="line"><span class="comment">// 出口文件夹</span></span><br><span class="line"><span class="keyword">const</span> outDir = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../lib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//vite基础配置</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">configFile</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">publicDir</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title function_">vueJsx</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//rollup配置</span></span><br><span class="line"><span class="keyword">const</span> rollupOptions = &#123;</span><br><span class="line">  <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>],</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">globals</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全量打包构建</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">buildAll</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">build</span>(&#123;</span><br><span class="line">    ...baseConfig,</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      rollupOptions,</span><br><span class="line">      <span class="attr">lib</span>: &#123;</span><br><span class="line">        <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(entryDir, <span class="string">&#x27;index.ts&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;mooc-element-components&#x27;</span>,</span><br><span class="line">        <span class="attr">fileName</span>: <span class="string">&#x27;mooc-element-components&#x27;</span>,</span><br><span class="line">        <span class="attr">formats</span>: [<span class="string">&#x27;es&#x27;</span>, <span class="string">&#x27;umd&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      outDir,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单组件打包构建</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; name 组件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">buildSingle</span> = <span class="keyword">async</span> (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">build</span>(&#123;</span><br><span class="line">    ...baseConfig,</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      rollupOptions,</span><br><span class="line">      <span class="attr">lib</span>: &#123;</span><br><span class="line">        <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(entryDir, name),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">fileName</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">formats</span>: [<span class="string">&#x27;es&#x27;</span>, <span class="string">&#x27;umd&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">outDir</span>: path.<span class="title function_">resolve</span>(outDir, name),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个组件生成package.json</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createPackageJson</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> fileStr = <span class="string">`</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;name&quot;: &quot;<span class="subst">$&#123;name&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">      &quot;main&quot;: &quot;index.umd.js&quot;,</span></span><br><span class="line"><span class="string">      &quot;module&quot;: &quot;index.es.js&quot;,</span></span><br><span class="line"><span class="string">      &quot;style&quot;: &quot;styles.css&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="comment">//输出</span></span><br><span class="line">  fsExtra.<span class="title function_">outputFile</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(outDir, <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span>),</span><br><span class="line">    fileStr,</span><br><span class="line">    <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打包成库</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">buildLib</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">buildAll</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件名称组成的数组</span></span><br><span class="line">  <span class="keyword">const</span> components = fs.<span class="title function_">readdirSync</span>(entryDir).<span class="title function_">filter</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> componentDir = path.<span class="title function_">resolve</span>(entryDir, name)</span><br><span class="line">    <span class="keyword">const</span> isDir = fs.<span class="title function_">lstatSync</span>(componentDir).<span class="title function_">isDirectory</span>()</span><br><span class="line">    <span class="keyword">return</span> isDir &amp;&amp; fs.<span class="title function_">readdirSync</span>(componentDir).<span class="title function_">includes</span>(<span class="string">&#x27;index.ts&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//循环构建</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> components) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">buildSingle</span>(name)</span><br><span class="line">    <span class="title function_">createPackageJson</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">buildLib</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js专项</title>
      <link href="/archives/588c9008.html"/>
      <url>/archives/588c9008.html</url>
      
        <content type="html"><![CDATA[<h3 id="for-in-amp-for-of"><a href="#for-in-amp-for-of" class="headerlink" title="for..in &amp; for..of"></a>for..in &amp; for..of</h3><ol><li> for in 适用于对象</li><li> for of 适用于具有 iterator 接口的数据结构 map set array NodeList arguments</li></ol><h3 id="filter-去重"><a href="#filter-去重" class="headerlink" title="filter 去重"></a>filter 去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> self.<span class="title function_">indexOf</span>(item) === index)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure><h3 id="parseInt-的使用"><a href="#parseInt-的使用" class="headerlink" title="parseInt 的使用"></a>parseInt 的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;11001&#x27;</span>, <span class="number">2</span>) <span class="comment">//第二个参数是进制 2-32</span></span><br></pre></td></tr></table></figure><h3 id="字符串-gt-AIISC-数组形式"><a href="#字符串-gt-AIISC-数组形式" class="headerlink" title="字符串=&gt;AIISC (数组形式)"></a>字符串=&gt;AIISC (数组形式)</h3><p>Array.prototype.map | filter | slice.call(字符串) 都可以使字符串调用数组方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123456  &#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>(str, <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h3 id="reduce-的基本用法"><a href="#reduce-的基本用法" class="headerlink" title="reduce 的基本用法"></a>reduce 的基本用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组求和</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> (prev += item), <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计出现的次数 利用reduce的第二个参数传递一个对象 做出key - value的形式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keywordCount</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pre[item]) pre[item] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> pre[item]++</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">keywordCount</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="数字千分化"><a href="#数字千分化" class="headerlink" title="数字千分化"></a>数字千分化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thousandNum</span>(<span class="params">number = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = (+number).<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> intNum = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> floatNum = arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getInt</span> = (<span class="params">nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">reverse</span>()</span><br><span class="line">      .<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">t, v, i</span>) =&gt;</span> t + (i % <span class="number">3</span> ? v : <span class="string">`<span class="subst">$&#123;v&#125;</span>,`</span>), <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/^,|,$/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getFloat</span> = (<span class="params">nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">t, v, i</span>) =&gt;</span> t + ((i + <span class="number">1</span>) % <span class="number">3</span> ? v : <span class="string">`<span class="subst">$&#123;v&#125;</span>,`</span>), <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/^,|,$/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr.<span class="property">length</span> &gt; <span class="number">1</span></span><br><span class="line">    ? <span class="string">`<span class="subst">$&#123;getInt(intNum)&#125;</span>.<span class="subst">$&#123;getFloat(floatNum)&#125;</span>`</span></span><br><span class="line">    : <span class="string">`<span class="subst">$&#123;getInt(intNum)&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">thousandNum</span>(<span class="number">11234.897495</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">const</span> number = <span class="number">12343.234235</span></span><br><span class="line"><span class="keyword">const</span> answer = number.<span class="title function_">toLocaleString</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer)</span><br></pre></td></tr></table></figure><h3 id="求数组最大最小值"><a href="#求数组最大最小值" class="headerlink" title="求数组最大最小值"></a>求数组最大最小值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种 利用apply方法</span></span><br><span class="line"><span class="comment">//apply第二个参数要穿传递一个数组,而Math.min | max的参数不能为数组,刚好满足</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">346</span>, <span class="number">43254</span>, <span class="number">90</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种 利用reduce</span></span><br><span class="line"><span class="comment">// 主要利用reduce的第二个参数如果不传就会默认为数组的第一个元素</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = pre &gt; cur ? cur : pre</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = pre &gt; cur ? pre : cur</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">346</span>, <span class="number">43254</span>, <span class="number">90</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min2</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max2</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种 sort</span></span><br><span class="line"><span class="comment">//sort里面的函数必须传,sort()不传参数默认对number型数组转成字符型数组进行排序</span></span><br><span class="line"><span class="keyword">const</span> min = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min)</span><br><span class="line"><span class="keyword">const</span> max = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)[arr.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四种 ...扩展运算符</span></span><br><span class="line"><span class="comment">// 最简单的一种</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr))</span><br></pre></td></tr></table></figure><h3 id="快速生成-1-100"><a href="#快速生成-1-100" class="headerlink" title="快速生成 1-100"></a>快速生成 1-100</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. fill map</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">i, index</span>) =&gt;</span> index + <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.Array.from</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">100</span>), <span class="function">(<span class="params">i, index</span>) =&gt;</span> index + <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.扩展运算符</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [...<span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">keys</span>()].<span class="title function_">map</span>(<span class="function">(<span class="params">i, index</span>) =&gt;</span> index + <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br></pre></td></tr></table></figure><h3 id="生成重复字符串"><a href="#生成重复字符串" class="headerlink" title="生成重复字符串"></a>生成重复字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种 递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">repeat1</span>(<span class="params">target, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [].<span class="title function_">concat</span>(target, <span class="title function_">repeat1</span>(target, n - <span class="number">1</span>)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">repeat1</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种 Array产生empty</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">repeat2</span>(<span class="params">target, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">join</span>(target)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">repeat2</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种 类数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">repeat3</span>(<span class="params">target, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, target)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">repeat3</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单使用wangeditor富文本</title>
      <link href="/archives/bb3aaed1.html"/>
      <url>/archives/bb3aaed1.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add wangeditor --save</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol><li>引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建 dom 元素</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实例化<br>要在 dom 元素全部更新完以后渲染<br>在 vue 中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;editor&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> editor = <span class="keyword">new</span> <span class="title function_">E</span>(<span class="string">&#x27;#editor&#x27;</span>)</span><br><span class="line">    editor.<span class="property">config</span>.<span class="property">placeholder</span> = item.<span class="property">placeholder</span>!</span><br><span class="line">    editor.<span class="title function_">create</span>()</span><br><span class="line">    <span class="comment">//初始化内容</span></span><br><span class="line">    editor.<span class="property">txt</span>.<span class="title function_">html</span>(item.<span class="property">value</span>)</span><br><span class="line">    <span class="comment">//实时监听富文本中的内容，做到数据的响应式</span></span><br><span class="line">    editor.<span class="property">config</span>.<span class="property">onchange</span> = <span class="function">(<span class="params">newHtml: string</span>) =&gt;</span> &#123;</span><br><span class="line">      model.<span class="property">value</span>[item.<span class="property">prop</span>!] = newHtml</span><br><span class="line">    &#125;</span><br><span class="line">    edit.<span class="property">value</span> = editor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mobx-v6的基本使用(React版)</title>
      <link href="/archives/ca026b9e.html"/>
      <url>/archives/ca026b9e.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mobx mobx-react-lite</span><br></pre></td></tr></table></figure><p>在 store 文件夹新建 modules 文件夹(放小仓库)，index.js 文件(合并小仓库，大仓库)</p><h3 id="小仓库的写法"><a href="#小仓库的写法" class="headerlink" title="小仓库的写法"></a>小仓库的写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; makeAutoObservable, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CounterStore</span> &#123;</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">makeAutoObservable</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//类似于getter 计算属性</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">filterList</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addList = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CounterStore</span></span><br></pre></td></tr></table></figure><h3 id="大仓库的合并小仓库-模块化开发"><a href="#大仓库的合并小仓库-模块化开发" class="headerlink" title="大仓库的合并小仓库 (模块化开发)"></a>大仓库的合并小仓库 (模块化开发)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ListStore</span> <span class="keyword">from</span> <span class="string">&#x27;./modules/list&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CounterStore</span> <span class="keyword">from</span> <span class="string">&#x27;./modules/counter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RootStore</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counterStore</span> = <span class="keyword">new</span> <span class="title class_">CounterStore</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> context = <span class="title function_">createContext</span>(<span class="keyword">new</span> <span class="title class_">RootStore</span>()) <span class="comment">//创建上下文对象</span></span><br><span class="line"><span class="comment">//使用组件间通信的context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">store</span> = (<span class="params"></span>) =&gt; <span class="title function_">useContext</span>(context) <span class="comment">//必需是一个函数，hooks只能在函数中使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="在组件中使用"><a href="#在组件中使用" class="headerlink" title="在组件中使用"></a>在组件中使用</h3><p>这里要用 observer 函数包裹 用于连接 mobx 实现响应式<br>类似于 react-redux 中的 connect 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react-lite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; counterStore &#125; = <span class="title function_">store</span>()</span><br><span class="line">  <span class="keyword">const</span> &#123; count, addCount, filterList, addList &#125; = counterStore</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addCount&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addList&#125;</span>&gt;</span>add list element<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;filterList.join(&#x27;-&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">observer</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react-router-dom-v6</title>
      <link href="/archives/a6642280.html"/>
      <url>/archives/a6642280.html</url>
      
        <content type="html"><![CDATA[<h1 id="React-Router-6-快速上手"><a href="#React-Router-6-快速上手" class="headerlink" title="React Router 6 快速上手"></a>React Router 6 快速上手</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ol><li><p>React Router 以三个不同的包发布到 npm 上，它们分别为：</p><ol><li>react-router: 路由的核心库，提供了很多的：组件、钩子。</li><li><strong style="color:#dd4d40"><strong>react-router-dom:</strong></strong > <strong style="color:#dd4d40">包含 react-router 所有内容，并添加一些专门用于 DOM 的组件，例如 <code>&lt;BrowserRouter&gt;</code>等 </strong>。</li><li>react-router-native: 包括 react-router 所有内容，并添加一些专门用于 ReactNative 的 API，例如:<code>&lt;NativeRouter&gt;</code>等。</li></ol></li><li><p>与 React Router 5.x 版本相比，改变了什么？</p><ol><li><p>内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。</p></li><li><p>语法的变化：<code>component=&#123;About&#125;</code> 变为 <code>element=&#123;&lt;About/&gt;&#125;</code>等。</p></li><li><p>新增多个 hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code>等。</p></li><li><p><strong style="color:#dd4d40">官方明确推荐函数式组件了！！！</strong></p><p>……</p></li></ol></li></ol><h2 id="2-Component"><a href="#2-Component" class="headerlink" title="2.Component"></a>2.Component</h2><h3 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h3><ol><li><p>说明：<code>&lt;BrowserRouter&gt; </code>用于包裹整个应用。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span>&#123;/* 整体结构（通常为App组件） */&#125;<span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">  root</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h3><ol><li>说明：作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的 hash 值。</li><li>备注：6.x 版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt; </code> 的用法与 5.x 相同。</li></ol><h3 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. &lt;Routes/&gt; 与 &lt;Route/&gt;"></a>3. <code>&lt;Routes/&gt; 与 &lt;Route/&gt;</code></h3><ol><li><p>v6 版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。</p></li><li><p><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</p></li><li><p><code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。</p></li><li><p><code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为 false）。</p></li><li><p>当 URL 发生变化时，<code>&lt;Routes&gt; </code>都会查看其所有子<code> &lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。</p></li><li><p><code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合<code>useRoutes()</code>配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Routes</span>&gt;</span><br><span class="line">  <span class="comment">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  <span class="comment">/*用于定义嵌套路由，home是一级路由，对应的路径/home*/</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    /*test1 和 test2 是二级路由,对应的路径是/home/test1 或 /home/test2*/</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Test2</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  <span class="comment">//Route也可以不写element属性, 这时就是用于展示嵌套的路由 .所对应的路径是/users/xxx</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Demo</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Routes</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. &lt;Link&gt;"></a>4. <code>&lt;Link&gt;</code></h3><ol><li><p>作用: 修改 URL，且不发送网络请求（路由链接）。</p></li><li><p>注意: 外侧需要用<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>包裹。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/路径&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. &lt;NavLink&gt;"></a>5. <code>&lt;NavLink&gt;</code></h3><ol><li><p>作用: 与<code>&lt;Link&gt;</code>组件类似，且可实现导航的“高亮”效果。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意: NavLink默认类名是active，下面是指定自定义的class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义样式</span></span><br><span class="line">&lt;<span class="title class_">NavLink</span></span><br><span class="line">    to=<span class="string">&quot;login&quot;</span></span><br><span class="line">    className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;home&#x27;</span>, isActive)</span><br><span class="line">        <span class="keyword">return</span> isActive ? <span class="string">&#x27;base one&#x27;</span> : <span class="string">&#x27;base&#x27;</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;login&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，</span></span><br><span class="line"><span class="comment">当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span> <span class="attr">end</span> &gt;</span>home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. &lt;Navigate&gt;"></a>6. <code>&lt;Navigate&gt;</code></h3><ol><li><p>作用：只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</p></li><li><p><code>replace</code>属性用于控制跳转模式（push 或 replace，默认是 push）。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [sum, setSum] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 根据sum的值决定是否切换视图 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;sum === 1 ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>sum的值为&#123;sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSum(2)&#125;&gt;点我将sum变为2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. &lt;Outlet&gt;"></a>7. <code>&lt;Outlet&gt;</code></h3><ol><li><p>当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据路由表生成对应的路由规则</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">useRoutes</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">News</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//Home.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home组件内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              News</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              Message</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 指定路由组件呈现的位置 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3.Hooks"></a>3.Hooks</h2><h3 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. useRoutes()</h3><ol><li><p>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由表配置：src/routes/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//App.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//根据路由表生成对应的路由规则</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">useRoutes</span>(routes)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">......</span></span><br><span class="line"><span class="language-xml">      &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">  ......</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. useNavigate()</h3><ol><li><p>作用：返回一个函数用来实现编程式导航。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//第一种使用方式：指定具体的路径</span></span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;/login&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">replace</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">state</span>: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//第二种使用方式：传入数值进行前进或后退，类似于5.x中的 history.go()方法</span></span><br><span class="line">    <span class="title function_">navigate</span>(-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. useParams()</h3><ol><li><p>作用：回当前匹配路由的<code>params</code>参数，类似于 5.x 中的<code>match.params</code>。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">Route</span>, useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/User.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProfilePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取URL中携带过来的params参数</span></span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = <span class="title function_">useParams</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;users/:id&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">User</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. useSearchParams()</h3><ol><li><p>作用：用于读取和修改当前位置的 URL 中的查询字符串。</p></li><li><p>返回一个包含两个值的数组，内容分别为：当前的 seaech 参数、更新 search 的函数。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">  <span class="keyword">const</span> id = search.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = search.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> content = search.<span class="title function_">get</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSearch(&#x27;id=008&amp;title=哈哈&amp;content=嘻嘻&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          点我更新一下收到的search参数</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. useLocation()</h3><ol><li><p>作用：获取当前 location 信息，对标 5.x 中的路由组件的<code>location</code>属性。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">useLocation</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>, x)</span><br><span class="line">  <span class="comment">// x就是location对象:</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">      hash: &quot;&quot;,</span></span><br><span class="line"><span class="comment">      key: &quot;ah9nv6sz&quot;,</span></span><br><span class="line"><span class="comment">      pathname: &quot;/login&quot;,</span></span><br><span class="line"><span class="comment">      search: &quot;?name=zs&amp;age=18&quot;,</span></span><br><span class="line"><span class="comment">      state: &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息编号：&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息标题：&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>消息内容：&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. useMatch()</h3><ol><li><p>作用：返回当前匹配信息，对标 5.x 中的路由组件的<code>match</code>属性。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/login/:page/:pageSize&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span> /&gt;</span></span>&#125;/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/login/1/10&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> match = <span class="title function_">useMatch</span>(<span class="string">&#x27;/login/:x/:y&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match) <span class="comment">//输出match对象</span></span><br><span class="line">  <span class="comment">//match对象内容如下：</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      params: &#123;x: &#x27;1&#x27;, y: &#x27;10&#x27;&#125;</span></span><br><span class="line"><span class="comment">      pathname: &quot;/LoGin/1/10&quot;</span></span><br><span class="line"><span class="comment">      pathnameBase: &quot;/LoGin/1/10&quot;</span></span><br><span class="line"><span class="comment">      pattern: &#123;</span></span><br><span class="line"><span class="comment">      path: &#x27;/login/:x/:y&#x27;,</span></span><br><span class="line"><span class="comment">      caseSensitive: false,</span></span><br><span class="line"><span class="comment">      end: false</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. useInRouterContext()</h3><p>​ 作用：如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。</p><h3 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h3><ol><li>作用：返回当前的导航类型（用户是如何来到当前页面的）。</li><li>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code>。</li><li>备注：<code>POP</code>是指在浏览器中直接打开了这个路由组件（刷新页面）。</li></ol><h3 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. useOutlet()</h3><ol><li><p>作用：用来呈现当前组件中渲染的嵌套路由。</p></li><li><p>示例代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">useOutlet</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// 如果嵌套路由没有挂载,则result为null</span></span><br><span class="line"><span class="comment">// 如果嵌套路由已经挂载,则展示嵌套的路由对象</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.useResolvedPath()</h3><ol><li>作用：给定一个 URL 值，解析其中的：path、search、hash 值。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redux在react中使用</title>
      <link href="/archives/cb203e91.html"/>
      <url>/archives/cb203e91.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-求和案例-redux-精简版"><a href="#1-求和案例-redux-精简版" class="headerlink" title="1.求和案例_redux 精简版"></a>1.求和案例_redux 精简版</h2><pre><code>    (1).去除Count组件自身的状态    (2).src下建立:                    -redux                        -store.js                        -count_reducer.js    (3).store.js：                1).引入redux中的createStore函数，创建一个store                2).createStore调用时要传入一个为其服务的reducer                3).记得暴露store对象    (4).count_reducer.js：                1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态                2).reducer有两个作用：初始化状态，加工状态                3).reducer被第一次调用时，是store自动触发的，                                传递的preState是undefined,                                传递的action是:&#123;type:&#39;@@REDUX/INIT_a.2.b.4&#125;    (5).在index.js中监测store中状态的改变，一旦发生改变重新渲染&lt;App/&gt;            备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</code></pre><h2 id="2-求和案例-redux-完整版"><a href="#2-求和案例-redux-完整版" class="headerlink" title="2.求和案例_redux 完整版"></a>2.求和案例_redux 完整版</h2><h2 id="2-求和案例-redux-完整版-1"><a href="#2-求和案例-redux-完整版-1" class="headerlink" title="2.求和案例_redux 完整版"></a>2.求和案例_redux 完整版</h2><pre><code>    新增文件：        1.count_action.js 专门用于创建action对象        2.constant.js 放置容易写错的type值</code></pre><h2 id="3-求和案例-redux-异步-action-版"><a href="#3-求和案例-redux-异步-action-版" class="headerlink" title="3.求和案例_redux 异步 action 版"></a>3.求和案例_redux 异步 action 版</h2><h2 id="3-求和案例-redux-异步-action-版-1"><a href="#3-求和案例-redux-异步-action-版-1" class="headerlink" title="3.求和案例_redux 异步 action 版"></a>3.求和案例_redux 异步 action 版</h2><h2 id="3-求和案例-redux-异步-action-版-2"><a href="#3-求和案例-redux-异步-action-版-2" class="headerlink" title="3.求和案例_redux 异步 action 版"></a>3.求和案例_redux 异步 action 版</h2><pre><code>     (1).明确：延迟的动作不想交给组件自身，想交给action     (2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。     (3).具体编码：                 1).yarn add redux-thunk，并配置在store中                 2).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。                 3).异步任务有结果后，分发一个同步的action去真正操作数据。     (4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</code></pre><h2 id="4-求和案例-react-redux-基本使用"><a href="#4-求和案例-react-redux-基本使用" class="headerlink" title="4.求和案例_react-redux 基本使用"></a>4.求和案例_react-redux 基本使用</h2><h2 id="4-求和案例-react-redux-基本使用-1"><a href="#4-求和案例-react-redux-基本使用-1" class="headerlink" title="4.求和案例_react-redux 基本使用"></a>4.求和案例_react-redux 基本使用</h2><h2 id="4-求和案例-react-redux-基本使用-2"><a href="#4-求和案例-react-redux-基本使用-2" class="headerlink" title="4.求和案例_react-redux 基本使用"></a>4.求和案例_react-redux 基本使用</h2><pre><code>        (1).明确两个概念：                    1).UI组件:不能使用任何redux的api，只负责页面的呈现、交互等。                    2).容器组件：负责和redux通信，将结果交给UI组件。        (2).如何创建一个容器组件————靠react-redux 的 connect函数                        connect(mapStateToProps,mapDispatchToProps)(UI组件)                            -mapStateToProps:映射状态，返回值是一个对象                            -mapDispatchToProps:映射操作状态的方法，返回值是一个对象        (3).备注1：容器组件中的store是靠props传进去的，而不是在容器组件中直接引入        (4).备注2：mapDispatchToProps，也可以是一个对象</code></pre><h2 id="5-求和案例-react-redux-优化"><a href="#5-求和案例-react-redux-优化" class="headerlink" title="5.求和案例_react-redux 优化"></a>5.求和案例_react-redux 优化</h2><h2 id="5-求和案例-react-redux-优化-1"><a href="#5-求和案例-react-redux-优化-1" class="headerlink" title="5.求和案例_react-redux 优化"></a>5.求和案例_react-redux 优化</h2><pre><code>        (1).容器组件和UI组件整合一个文件        (2).无需自己给容器组件传递store，给&lt;App/&gt;包裹一个&lt;Provider store=&#123;store&#125;&gt;即可。        (3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。        (4).mapDispatchToProps也可以简单的写成一个对象        (5).一个组件要和redux“打交道”要经过哪几步？                        (1).定义好UI组件---不暴露                        (2).引入connect生成一个容器组件，并暴露，写法如下：                                connect(                                    state =&gt; (&#123;key:value&#125;), //映射状态                                    &#123;key:xxxxxAction&#125; //映射操作状态的方法                                )(UI组件)                        (4).在UI组件中通过this.props.xxxxxxx读取和操作状态</code></pre><h2 id="6-求和案例-react-redux-数据共享版"><a href="#6-求和案例-react-redux-数据共享版" class="headerlink" title="6.求和案例_react-redux 数据共享版"></a>6.求和案例_react-redux 数据共享版</h2><h2 id="6-求和案例-react-redux-数据共享版-1"><a href="#6-求和案例-react-redux-数据共享版-1" class="headerlink" title="6.求和案例_react-redux 数据共享版"></a>6.求和案例_react-redux 数据共享版</h2><h2 id="6-求和案例-react-redux-数据共享版-2"><a href="#6-求和案例-react-redux-数据共享版-2" class="headerlink" title="6.求和案例_react-redux 数据共享版"></a>6.求和案例_react-redux 数据共享版</h2><pre><code>        (1).定义一个Pserson组件，和Count组件通过redux共享数据。        (2).为Person组件编写：reducer、action，配置constant常量。        (3).重点：Person的reducer和Count的Reducer要使用combineReducers进行合并，                合并后的总状态是一个对象！！！        (4).交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。</code></pre><h2 id="7-求和案例-react-redux-开发者工具的使用"><a href="#7-求和案例-react-redux-开发者工具的使用" class="headerlink" title="7.求和案例_react-redux 开发者工具的使用"></a>7.求和案例_react-redux 开发者工具的使用</h2><pre><code>        (1).yarn add redux-devtools-extension        (2).store中进行配置                import &#123;composeWithDevTools&#125; from &#39;redux-devtools-extension&#39;                const store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))</code></pre><h2 id="8-求和案例-react-redux-最终版"><a href="#8-求和案例-react-redux-最终版" class="headerlink" title="8.求和案例_react-redux 最终版"></a>8.求和案例_react-redux 最终版</h2><pre><code>        (1).所有变量名字要规范，尽量触发对象的简写形式。        (2).reducers文件夹中，编写index.js专门用于汇总并暴露所有的reducer</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ep组件里面的select组件的过滤</title>
      <link href="/archives/d60089ec.html"/>
      <url>/archives/d60089ec.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">&quot;changeSelct&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;selectValue&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;请搜索城市&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:filter-method</span>=<span class="string">&quot;filterMethod&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;item in options&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要加上 filterable 就可以对数据进行过滤<br>如果要自定义过滤方法就要加上 filter-method 这个属性<br>形参 val 是 el-option 绑定的 value 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义搜索过滤</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">filterMethod</span> = (<span class="params">val: string</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//要根据原始数据过滤</span></span><br><span class="line">  <span class="keyword">let</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(cities.<span class="property">value</span>).<span class="title function_">flat</span>(<span class="title class_">Infinity</span>) <span class="keyword">as</span> <span class="title class_">City</span>[]</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    options.<span class="property">value</span> = values</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (radioValue.<span class="property">value</span> === <span class="string">&#x27;按城市&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//中文和拼音一起过滤</span></span><br><span class="line">      options.<span class="property">value</span> = values.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span>.<span class="title function_">includes</span>(val) || item.<span class="property">spell</span>.<span class="title function_">includes</span>(val)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      options.<span class="property">value</span> = values.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span>.<span class="title function_">includes</span>(val)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>scrollIntoView的使用</title>
      <link href="/archives/11dcb501.html"/>
      <url>/archives/11dcb501.html</url>
      
        <content type="html"><![CDATA[<h3 id="mdn-链接"><a href="#mdn-链接" class="headerlink" title="mdn 链接"></a>mdn 链接</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView</a></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="/img/scrollIntoView.jpg"></p><p>上图实现点击字母跳到下面的指定字母位置<br>先要给每个上面的字母绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字母区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;div v-for=&quot;(vale, key) in cities&quot;&gt;&#123;&#123; key &#125;&#125;&lt;/div&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;city-item&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;clickChat(item)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in Object.keys(cities)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着给下面的字母区域绑定一个 id key 是 A 到 Z</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in cities&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">style</span>=<span class="string">&quot;margin: 10px&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span>&#123;&#123; key &#125;&#125;:<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">class</span>=<span class="string">&quot;city-name&quot;</span> <span class="attr">:span</span>=<span class="string">&quot;22&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;clickItem(item)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;city-name-item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in value&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>clickChat 的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击字母</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickChat</span> = (<span class="params">item: string</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(item) <span class="comment">//item是字母</span></span><br><span class="line">  <span class="keyword">if</span> (el) el.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;) <span class="comment">//移动到当前id是item值的dom元素的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这里不能使用锚点链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>锚点链接会改变 vue 的路由的变化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vite2创建vue2项目</title>
      <link href="/archives/fd7de849.html"/>
      <url>/archives/fd7de849.html</url>
      
        <content type="html"><![CDATA[<h3 id="创建-vanilla-项目"><a href="#创建-vanilla-项目" class="headerlink" title="创建 vanilla 项目"></a>创建 vanilla 项目</h3><p>因为 vanilla 是纯 js 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></table></figure><p>记得选择 vanilla</p><h3 id="安装插件并安装必要依赖"><a href="#安装插件并安装必要依赖" class="headerlink" title="安装插件并安装必要依赖"></a>安装插件并安装必要依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vite-plugin-vue2 -D</span><br><span class="line">pnpm i vue@2</span><br><span class="line">pnpm i vue-template-compiler -D</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在 vite.config.js 里面配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVuePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">createVuePlugin</span>()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建-App-vue"><a href="#创建-App-vue" class="headerlink" title="创建 App.vue"></a>创建 App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>vue2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改-main-js"><a href="#修改-main-js" class="headerlink" title="修改 main.js"></a>修改 main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tsx封装EP无限菜单组件</title>
      <link href="/archives/bf9f2648.html"/>
      <url>/archives/bf9f2648.html</url>
      
        <content type="html"><![CDATA[<h3 id="先下载依赖—vite-项目"><a href="#先下载依赖—vite-项目" class="headerlink" title="先下载依赖—vite 项目"></a>先下载依赖—vite 项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @vitejs/plugin-vue-jsx</span><br></pre></td></tr></table></figure><h3 id="接着在-vite-config-ts-中引入"><a href="#接着在-vite-config-ts-中引入" class="headerlink" title="接着在 vite.config.ts 中引入"></a>接着在 vite.config.ts 中引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title function_">vueJsx</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>],</span><br><span class="line">      <span class="comment">//为true时在项目根目录自动创建</span></span><br><span class="line">      <span class="attr">dts</span>: <span class="string">&#x27;types/auto-imports.d.ts&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在-vue3-中使用-jsx-的话只能用-setup-加-return-的形式，而且-return-的一定是一个函数"><a href="#在-vue3-中使用-jsx-的话只能用-setup-加-return-的形式，而且-return-的一定是一个函数" class="headerlink" title="在 vue3 中使用 jsx 的话只能用 setup 加 return 的形式，而且 return 的一定是一个函数"></a>在 vue3 中使用 jsx 的话只能用 setup 加 return 的形式，而且 return 的一定是一个函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MenuItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../styles/index.scss&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">//导航菜单的数据</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">MenuItem</span>[]&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//默认选中项</span></span><br><span class="line">    <span class="attr">defaultActive</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//是否是路由模式</span></span><br><span class="line">    <span class="attr">router</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//自定义键名</span></span><br><span class="line">    <span class="comment">//菜单标题的键名</span></span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//菜单标识的键名</span></span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//菜单图标的键名</span></span><br><span class="line">    <span class="attr">icon</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;icon&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//菜单图标的键名</span></span><br><span class="line">    <span class="attr">children</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;children&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    <span class="comment">//封装一个无限层级菜单的方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">renderMenu</span> = (<span class="params">data: any[]</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//每个菜单的图标</span></span><br><span class="line">        <span class="comment">//这里不能用自己封装的图标el-icon-xxx的形式，只能用&lt;Xxxx/&gt;的形式</span></span><br><span class="line">        item.<span class="property">i</span> = (<span class="title class_">Icons</span> <span class="keyword">as</span> any)[item[props.<span class="property">icon</span>]!]</span><br><span class="line">        <span class="comment">//插槽在tsx中的写法，插槽的本质就是对象，里面的每一个插槽都是函数</span></span><br><span class="line">        <span class="keyword">let</span> slots = &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">item.i</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item[props.name]&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归渲染children</span></span><br><span class="line">        <span class="keyword">if</span> (item[props.<span class="property">children</span>] &amp;&amp; item[props.<span class="property">children</span>].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">index</span>=<span class="string">&#123;item[props.index]&#125;</span> <span class="attr">v-slots</span>=<span class="string">&#123;slots&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;renderMenu(item[props.children]!)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正常渲染子菜单</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&#123;item[props.index]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">item.i</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;item[props.name]&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> attrs = <span class="title function_">useAttrs</span>()<span class="comment">//vue3的hooks API</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-menu</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">default-active</span>=<span class="string">&#123;props.defaultActive&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">router</span>=<span class="string">&#123;props.router&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...attrs</span>&#125;//相当于模板写法的<span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;renderMenu(props.data)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React-router-dom-V5笔记</title>
      <link href="/archives/d5d23223.html"/>
      <url>/archives/d5d23223.html</url>
      
        <content type="html"><![CDATA[<h2 id="三、路由的基本使用"><a href="#三、路由的基本使用" class="headerlink" title="三、路由的基本使用"></a>三、路由的基本使用</h2><pre><code>        1.明确好界面中的导航区、展示区        2.导航区的a标签改为Link标签                    &lt;Link to=&quot;/xxxxx&quot;&gt;Demo&lt;/Link&gt;        3.展示区写Route标签进行路径的匹配                    &lt;Route path=&#39;/xxxx&#39; component=&#123;Demo&#125;/&gt;        4.&lt;App&gt;的最外侧包裹了一个&lt;BrowserRouter&gt;或&lt;HashRouter&gt;</code></pre><h2 id="四、路由组件与一般组件"><a href="#四、路由组件与一般组件" class="headerlink" title="四、路由组件与一般组件"></a>四、路由组件与一般组件</h2><pre><code>        1.写法不同：                    一般组件：&lt;Demo/&gt;                    路由组件：&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;        2.存放位置不同：                    一般组件：components                    路由组件：pages        3.接收到的props不同：                    一般组件：写组件标签时传递了什么，就能收到什么                    路由组件：接收到三个固定的属性                                        history:                                                    go: ƒ go(n)                                                    goBack: ƒ goBack()                                                    goForward: ƒ goForward()                                                    push: ƒ push(path, state)                                                    replace: ƒ replace(path, state)                                        location:                                                    pathname: &quot;/about&quot;                                                    search: &quot;&quot;                                                    state: undefined                                        match:                                                    params: &#123;&#125;                                                    path: &quot;/about&quot;                                                    url: &quot;/about&quot;</code></pre><h2 id="五、NavLink-与封装-NavLink"><a href="#五、NavLink-与封装-NavLink" class="headerlink" title="五、NavLink 与封装 NavLink"></a>五、NavLink 与封装 NavLink</h2><pre><code>            1.NavLink可以实现路由链接的高亮，通过activeClassName指定样式名</code></pre><h2 id="六、Switch-的使用"><a href="#六、Switch-的使用" class="headerlink" title="六、Switch 的使用"></a>六、Switch 的使用</h2><pre><code>            1.通常情况下，path和component是一一对应的关系。            2.Switch可以提高路由匹配效率(单一匹配)。</code></pre><h2 id="七、解决多级路径刷新页面样式丢失的问题"><a href="#七、解决多级路径刷新页面样式丢失的问题" class="headerlink" title="七、解决多级路径刷新页面样式丢失的问题"></a>七、解决多级路径刷新页面样式丢失的问题</h2><pre><code>            1.public/index.html 中 引入样式时不写 ./ 写 / （常用）            2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）            3.使用HashRouter</code></pre><h2 id="八、路由的严格匹配与模糊匹配"><a href="#八、路由的严格匹配与模糊匹配" class="headerlink" title="八、路由的严格匹配与模糊匹配"></a>八、路由的严格匹配与模糊匹配</h2><pre><code>            1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）            2.开启严格匹配：&lt;Route exact=&#123;true&#125; path=&quot;/about&quot; component=&#123;About&#125;/&gt;            3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</code></pre><h2 id="九、Redirect-的使用"><a href="#九、Redirect-的使用" class="headerlink" title="九、Redirect 的使用"></a>九、Redirect 的使用</h2><pre><code>            1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由            2.具体编码：                    &lt;Switch&gt;                        &lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;                        &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;                        &lt;Redirect to=&quot;/about&quot;/&gt;                    &lt;/Switch&gt;</code></pre><h2 id="十、嵌套路由"><a href="#十、嵌套路由" class="headerlink" title="十、嵌套路由"></a>十、嵌套路由</h2><pre><code>            1.注册子路由时要写上父路由的path值            2.路由的匹配是按照注册路由的顺序进行的</code></pre><h2 id="十一、向路由组件传递参数"><a href="#十一、向路由组件传递参数" class="headerlink" title="十一、向路由组件传递参数"></a>十一、向路由组件传递参数</h2><pre><code>            1.params参数                        路由链接(携带参数)：&lt;Link to=&#39;/demo/test/tom/18&#39;&#125;&gt;详情&lt;/Link&gt;                        注册路由(声明接收)：&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;                        接收参数：this.props.match.params            2.search参数                        路由链接(携带参数)：&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;&#125;&gt;详情&lt;/Link&gt;                        注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;                        接收参数：this.props.location.search                        备注：获取到的search是urlencoded编码字符串，需要借助querystring解析            3.state参数                        路由链接(携带参数)：&lt;Link to=&#123;&#123;pathname:'/demo/test',state:&#123;name:'tom',age:18&#125;&#125;&#125;&gt;详情&lt;/Link&gt;                        注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;                        接收参数：this.props.location.state                        备注：刷新也可以保留住参数</code></pre><h2 id="十二、编程式路由导航"><a href="#十二、编程式路由导航" class="headerlink" title="十二、编程式路由导航"></a>十二、编程式路由导航</h2><h2 id="十二、编程式路由导航-1"><a href="#十二、编程式路由导航-1" class="headerlink" title="十二、编程式路由导航"></a>十二、编程式路由导航</h2><pre><code>                借助this.prosp.history对象上的API对操作路由跳转、前进、后退                        -this.prosp.history.push()                        -this.prosp.history.replace()`                        -this.prosp.history.goBack()                        -this.prosp.history.goForward()                        -this.prosp.history.go()</code></pre><h2 id="十三、BrowserRouter-与-HashRouter-的区别"><a href="#十三、BrowserRouter-与-HashRouter-的区别" class="headerlink" title="十三、BrowserRouter 与 HashRouter 的区别"></a>十三、BrowserRouter 与 HashRouter 的区别</h2><pre><code>        1.底层原理不一样：                    BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。                    HashRouter使用的是URL的哈希值。        2.path表现形式不一样                    BrowserRouter的路径中没有#,例如：localhost:3000/demo/test                    HashRouter的路径包含#,例如：localhost:3000/#/demo/test        3.刷新后对路由state参数的影响                    (1).BrowserRouter没有任何影响，因为state保存在history对象中。                    (2).HashRouter刷新后会导致路由state参数的丢失！！！        4.备注：HashRouter可以用于解决一些路径错误相关的问题。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>attrs属性的妙用</title>
      <link href="/archives/2b41cc90.html"/>
      <url>/archives/2b41cc90.html</url>
      
        <content type="html"><![CDATA[<h3 id="attrs-的简单介绍"><a href="#attrs-的简单介绍" class="headerlink" title="$attrs 的简单介绍"></a>$attrs 的简单介绍</h3><p>$attrs是Vue组件实例对象上的的一个属性。如果组件上的传递的属性没有被props接收到，那么剩下的就在$attr 下</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">m-menu</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:data</span>=<span class="string">&quot;data1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">defaultActive</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">active-text-color</span>=<span class="string">&quot;skyblue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">m-menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-active</span>=<span class="string">&quot;defaultActive&quot;</span> <span class="attr">:router</span>=<span class="string">&quot;router&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span></span><br><span class="line">    ...... ......</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MenuItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; toLine &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../utils&#x27;</span></span><br><span class="line"><span class="keyword">let</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">//导航菜单的数据</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">MenuItem</span>[]&gt;,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//默认选中项</span></span><br><span class="line">  <span class="attr">defaultActive</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//是否是路由模式</span></span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件用 props 接收了 data &amp; defaultActive &amp; router,但 active-text-color 被$attrs 接收<br>v-bind=”$attrs” 这句代码可以自动绑定到 el-menu 上 ==&gt; :active-text-color=”active-text-color”<br>这对二次封装组件提高了效率，很方便！！<br>这个与 React 的 {…something} 类似</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>封装NavLink</title>
      <link href="/archives/8a50ef16.html"/>
      <url>/archives/8a50ef16.html</url>
      
        <content type="html"><![CDATA[<h4 id="封装-NavLink-是为了见减少重复写-ClassName-和-activeClassName"><a href="#封装-NavLink-是为了见减少重复写-ClassName-和-activeClassName" class="headerlink" title="封装 NavLink 是为了见减少重复写 ClassName 和 activeClassName"></a>封装 NavLink 是为了见减少重复写 ClassName 和 activeClassName</h4><h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyNavLink</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">activeClassName</span>=<span class="string">&quot;atguigu&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个技巧，就是 props 身上有个隐藏属性 children,当标签体里有内容时，会显示 children<br>原生 NavLink 支持 children 属性就是插槽作为标签体内容</p><h4 id="使用如下："><a href="#使用如下：" class="headerlink" title="使用如下："></a>使用如下：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">children</span>=<span class="string">&quot;About&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fetch好的写法</title>
      <link href="/archives/9b95e22a.html"/>
      <url>/archives/9b95e22a.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api1/search/users2?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; items &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">  <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;atguigu&#x27;</span>, &#123; <span class="attr">isLoading</span>: <span class="literal">false</span>, <span class="attr">users</span>: items &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;atguigu&#x27;</span>, &#123; <span class="attr">isLoading</span>: <span class="literal">false</span>, <span class="attr">err</span>: error.<span class="property">message</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
